name: Integration Checks

on:
  pull_request_target:
    branches:
      - "main*"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read
  packages: write


jobs:
  collab-check:
    runs-on: ubuntu-latest
    outputs:
      approval-env: ${{ steps.collab-check.outputs.result }}
    steps:
      - name: Collaborator Check
        uses: actions/github-script@v7
        id: collab-check
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            try {
              const res = await github.rest.repos.checkCollaborator({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: "${{ github.event.pull_request.user.login }}",
              });
              console.log("Verifed ${{ github.event.pull_request.user.login }} is a repo collaborator. Auto Approving PR Checks.")
              return res.status == "204" ? "auto-approve" : "manual-approval"
            } catch (error) {
            console.log(error)
              console.log("${{ github.event.pull_request.user.login }} is not a collaborator for "+ context.repo.repo + ".  Requiring Manual Approval to run PR Checks.")
              return "manual-approval"
            }
  wait-for-approval:
    runs-on: ubuntu-latest
    needs: [ collab-check ]
    environment: ${{ needs.collab-check.outputs.approval-env }}
    steps:
      - run: echo "Workflow Approved! Starting Integration tests"
  integ-tests:
    runs-on: ubuntu-latest
    needs: [wait-for-approval]
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.12" ]
    env:
      SUBNET_ONE: ${{ secrets.SUBNET_ONE }}
      SUBNET_TWO: ${{ secrets.SUBNET_TWO }}
      SECURITY_GROUP_ONE: ${{ secrets.SECURITY_GROUP_ONE }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          export PYTHONPATH="$PYTHONPATH:$PWD"
          python -m pip install --upgrade pip
          pip install scikit-learn sagemaker setuptools awscli
          pip install -e ".[codegen]"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.INTEG_TEST_ROLE_ARN }}
          aws-region: us-west-2
          role-duration-seconds: 10800
      - name: Run Integration Tests
        id: run-integration-tests
        run: |
          pytest integ
      - name: Put Failure Metrics to CloudWatch
        if: ${{ failure() }}
        run: |
          if [[ "${{ github.event.pull_request.user.login }}" == ${{ secrets.SAGEMAKER_BOT_USER_LOGIN }} ]]; then
            echo "Integration test Failed. Putting Failure Metrics onto Cloudwatch"
            aws cloudwatch put-metric-data --metric-name IntegrationTestFailure --namespace SageMakerPySdkCoreMonitoringMetrics --value 1 --unit Count --dimensions MetricCategory=Integration
          else
            echo "Putting metrics has been skipped"
          fi
      - name: Put Success Metrics to CloudWatch
        if: ${{ success() }}
        run: |
          if [[ "${{ github.event.pull_request.user.login }}" == ${{ secrets.SAGEMAKER_BOT_USER_LOGIN }} ]]; then
            echo "Integration test Succeeded. Putting Success Metrics onto Cloudwatch"
            aws cloudwatch put-metric-data --metric-name IntegrationTestSuccess --namespace SageMakerPySdkCoreMonitoringMetrics --value 1 --unit Count --dimensions MetricCategory=Integration
          else
            echo "Putting metrics has been skipped"
          fi